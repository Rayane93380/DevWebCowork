# Generated by Django 5.1.7 on 2025-04-05 00:26

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Salle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('capacite', models.IntegerField()),
                ('disponible', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('points', models.IntegerField(default=0)),
                ('niveau', models.IntegerField(default=1)),
                ('nom', models.CharField(default='Inconnu', max_length=150)),
                ('prenom', models.CharField(default='Inconnu', max_length=150)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('genre', models.CharField(blank=True, choices=[('Homme', 'Homme'), ('Femme', 'Femme'), ('Autre', 'Autre')], max_length=10, null=True)),
                ('date_de_naissance', models.DateField(blank=True, null=True)),
                ('photo_profil', models.ImageField(blank=True, null=True, upload_to='photos_profil/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objet_type', models.CharField(choices=[('imprimante', 'Imprimante'), ('ordinateur', 'Ordinateur')], max_length=50)),
                ('objet_id', models.IntegerField()),
                ('date_reservation', models.DateTimeField(default=datetime.datetime.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Poubelle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_unique', models.CharField(max_length=50, unique=True)),
                ('type_dechet', models.CharField(choices=[('plastique', 'Plastique'), ('carton', 'Carton'), ('alimentaire', 'Alimentaire'), ('papier', 'Papier')], max_length=50)),
                ('couleur', models.CharField(max_length=50)),
                ('capacite_maximale', models.FloatField()),
                ('quantite_present', models.FloatField(default=0)),
                ('salle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.salle')),
            ],
        ),
        migrations.CreateModel(
            name='Ordinateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marque', models.CharField(max_length=100)),
                ('modele', models.CharField(max_length=100)),
                ('numero_serie', models.CharField(max_length=100, unique=True)),
                ('etat', models.CharField(choices=[('fonctionnel', 'Fonctionnel'), ('en panne', 'En panne')], default='fonctionnel', max_length=50)),
                ('reservable', models.BooleanField(default=True)),
                ('maintenance_due', models.BooleanField(default=False)),
                ('reservation_count', models.IntegerField(default=0)),
                ('salle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.salle')),
            ],
        ),
        migrations.CreateModel(
            name='Imprimante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modele', models.CharField(max_length=100)),
                ('connectivite', models.CharField(default='Wi-Fi', max_length=100)),
                ('etat', models.CharField(choices=[('en fonctionnement', 'En fonctionnement'), ('en panne', 'En panne')], default='en fonctionnement', max_length=50)),
                ('reservable', models.BooleanField(default=True)),
                ('maintenance_due', models.BooleanField(default=False)),
                ('reservation_count', models.IntegerField(default=0)),
                ('salle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.salle')),
            ],
        ),
        migrations.CreateModel(
            name='CapteurPresence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compteur', models.IntegerField(default=0)),
                ('salle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.salle')),
            ],
        ),
        migrations.CreateModel(
            name='Thermostat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_unique', models.CharField(max_length=50, unique=True)),
                ('nom', models.CharField(max_length=100)),
                ('temperature_courante', models.FloatField(default=21.0)),
                ('temperature_cible', models.FloatField(default=23.0)),
                ('mode', models.CharField(choices=[('automatique', 'Automatique'), ('manuel', 'Manuel')], default='automatique', max_length=50)),
                ('connectivite', models.CharField(default='Wi-Fi, signal fort', max_length=100)),
                ('etat_batterie', models.IntegerField(default=100)),
                ('derniere_interaction', models.DateTimeField(auto_now=True)),
                ('salle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.salle')),
            ],
        ),
    ]
